--- qtwebengine-opensource-src-5.5.1/examples/webengine/quicknanobrowser/BrowserWindow.qml.0001~	2015-10-13 06:35:46.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/examples/webengine/quicknanobrowser/BrowserWindow.qml	2015-10-21 16:30:49.633922554 +0200
@@ -82,6 +82,7 @@ ApplicationWindow {
         property alias autoLoadImages: loadImages.checked;
         property alias javaScriptEnabled: javaScriptEnabled.checked;
         property alias errorPageEnabled: errorPageEnabled.checked;
+        property alias pluginsEnabled: pluginsEnabled.checked;
     }
 
     Action {
@@ -230,6 +231,12 @@ ApplicationWindow {
                             checked: WebEngine.settings.errorPageEnabled
                         }
                         MenuItem {
+                            id: pluginsEnabled
+                            text: "Plugins On"
+                            checkable: true
+                            checked: true
+                        }
+                        MenuItem {
                             id: offTheRecordEnabled
                             text: "Off The Record"
                             checkable: true
@@ -312,6 +319,7 @@ ApplicationWindow {
                 settings.autoLoadImages: appSettings.autoLoadImages
                 settings.javascriptEnabled: appSettings.javaScriptEnabled
                 settings.errorPageEnabled: appSettings.errorPageEnabled
+                settings.pluginsEnabled: appSettings.pluginsEnabled
 
                 onCertificateError: {
                     error.defer()
--- qtwebengine-opensource-src-5.5.1/src/core/config/desktop_linux.pri.0001~	2015-10-13 06:36:54.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/src/core/config/desktop_linux.pri	2015-10-21 16:30:49.633922554 +0200
@@ -15,6 +15,7 @@ GYP_CONFIG += \
     use_pango=0 \
     host_clang=0 \
     clang=0 \
+    enable_plugins=1 \
 
 contains(QT_CONFIG, system-jpeg): GYP_CONFIG += use_system_libjpeg=1
 
--- qtwebengine-opensource-src-5.5.1/src/core/config/mac_osx.pri.0001~	2015-10-13 06:36:54.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/src/core/config/mac_osx.pri	2015-10-21 16:30:49.633922554 +0200
@@ -14,7 +14,8 @@ GYP_CONFIG += \
     mac_sdk_min=\"10.7\" \
     mac_deployment_target=\"$${QMAKE_MACOSX_DEPLOYMENT_TARGET}\" \
     make_clang_dir=\"$${QMAKE_CLANG_DIR}\" \
-    clang_use_chrome_plugins=0
+    clang_use_chrome_plugins=0 \
+    enable_plugins=1
 
 QMAKE_MAC_SDK_PATH = "$$eval(QMAKE_MAC_SDK.$${QMAKE_MAC_SDK}.path)"
 exists($$QMAKE_MAC_SDK_PATH): GYP_CONFIG += mac_sdk_path=\"$${QMAKE_MAC_SDK_PATH}\"
--- qtwebengine-opensource-src-5.5.1/src/core/content_client_qt.cpp.0001~	2015-10-13 06:36:54.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/src/core/content_client_qt.cpp	2015-10-21 16:30:49.634922556 +0200
@@ -36,11 +36,120 @@
 
 #include "content_client_qt.h"
 
+#include "base/command_line.h"
 #include "base/strings/string_piece.h"
+#include "base/strings/string_split.h"
+#include "base/strings/string_util.h"
+#include "content/public/common/content_constants.h"
 #include "content/public/common/user_agent.h"
 #include "ui/base/layout.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/resource/resource_bundle.h"
+#include "type_conversion.h"
+
+#include <QCoreApplication>
+#include <QFile>
+#include <QStringBuilder>
+
+#if defined(ENABLE_PLUGINS)
+#include "content/public/common/pepper_plugin_info.h"
+#include "ppapi/shared_impl/ppapi_permissions.h"
+
+static const int32 kPepperFlashPermissions = ppapi::PERMISSION_DEV |
+                                             ppapi::PERMISSION_PRIVATE |
+                                             ppapi::PERMISSION_BYPASS_USER_GESTURE |
+                                             ppapi::PERMISSION_FLASH;
+
+namespace switches {
+const char kPpapiFlashPath[]    = "ppapi-flash-path";
+const char kPpapiFlashVersion[] = "ppapi-flash-version";
+}
+
+// Adopted from chrome_content_client.cc
+content::PepperPluginInfo CreatePepperFlashInfo(const base::FilePath& path, const std::string& version)
+{
+    content::PepperPluginInfo plugin;
+
+    plugin.is_out_of_process = true;
+    plugin.name = content::kFlashPluginName;
+    plugin.path = path;
+    plugin.permissions = kPepperFlashPermissions;
+
+    std::vector<std::string> flash_version_numbers;
+    base::SplitString(version, '.', &flash_version_numbers);
+    if (flash_version_numbers.size() < 1)
+        flash_version_numbers.push_back("11");
+    else if (flash_version_numbers[0].empty())
+        flash_version_numbers[0] = "11";
+    if (flash_version_numbers.size() < 2)
+        flash_version_numbers.push_back("2");
+    if (flash_version_numbers.size() < 3)
+        flash_version_numbers.push_back("999");
+    if (flash_version_numbers.size() < 4)
+        flash_version_numbers.push_back("999");
+
+    // E.g., "Shockwave Flash 10.2 r154":
+    plugin.description = plugin.name + " " + flash_version_numbers[0] + "." + flash_version_numbers[1] + " r" + flash_version_numbers[2];
+    plugin.version = JoinString(flash_version_numbers, '.');
+    content::WebPluginMimeType swf_mime_type(content::kFlashPluginSwfMimeType,
+                                             content::kFlashPluginSwfExtension,
+                                             content::kFlashPluginSwfDescription);
+    plugin.mime_types.push_back(swf_mime_type);
+    content::WebPluginMimeType spl_mime_type(content::kFlashPluginSplMimeType,
+                                             content::kFlashPluginSplExtension,
+                                             content::kFlashPluginSplDescription);
+    plugin.mime_types.push_back(spl_mime_type);
+
+    return plugin;
+}
+
+void AddPepperFlashFromSystem(std::vector<content::PepperPluginInfo>* plugins)
+{
+    QStringList pluginPaths;
+#if defined(Q_OS_WIN) && defined(Q_PROCESSOR_X86_32)
+    QDir pluginDir("C:/Windows/SysWOW64/Macromed/Flash");
+    pluginDir.setFilter(QDir::Files);
+    QStringList nameFilters("pepflashplayer*.dll");
+    pluginPaths << pluginDir.entryList(nameFilters);
+#endif
+#if defined(Q_OS_OSX)
+    pluginPaths << "/Library/Internet Plug-Ins/PepperFlashPlayer/PepperFlashPlayer.plugin"; // Mac OS X
+#endif
+#if defined(Q_OS_LINUX)
+    pluginPaths << "/usr/lib/pepperflashplugin-nonfree/libpepflashplayer.so" // Ubuntu
+                << "/usr/lib/PepperFlash/libpepflashplayer.so" // Arch
+                << "/usr/lib64/chromium/PepperFlash/libpepflashplayer.so" // OpenSuSE
+                << "/usr/lib/chromium/PepperFlash/libpepflashplayer.so"; // OpenSuSE 32bit
+#endif
+    for (auto it = pluginPaths.constBegin(); it != pluginPaths.constEnd(); ++it) {
+        if (!QFile(*it).exists())
+            continue;
+        plugins->push_back(CreatePepperFlashInfo(QtWebEngineCore::toFilePath(*it), std::string()));
+        return;
+    }
+}
+
+void AddPepperFlashFromCommandLine(std::vector<content::PepperPluginInfo>* plugins)
+{
+    const CommandLine::StringType flash_path = CommandLine::ForCurrentProcess()->GetSwitchValueNative(switches::kPpapiFlashPath);
+    if (flash_path.empty() || !QFile(QtWebEngineCore::toQt(flash_path)).exists())
+        return;
+
+    // Read pepper flash plugin version from command-line. (e.g. 16.0.0.235)
+    std::string flash_version = CommandLine::ForCurrentProcess()->GetSwitchValueASCII(switches::kPpapiFlashVersion);
+    plugins->push_back(CreatePepperFlashInfo(base::FilePath(flash_path), flash_version));
+}
+
+namespace QtWebEngineCore {
+
+void ContentClientQt::AddPepperPlugins(std::vector<content::PepperPluginInfo>* plugins)
+{
+    AddPepperFlashFromSystem(plugins);
+    AddPepperFlashFromCommandLine(plugins);
+}
+
+}
+#endif
 
 #include <QCoreApplication>
 #include <QStringBuilder>
--- qtwebengine-opensource-src-5.5.1/src/core/content_client_qt.h.0001~	2015-10-13 06:36:54.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/src/core/content_client_qt.h	2015-10-21 16:30:49.634922556 +0200
@@ -48,6 +48,10 @@ class ContentClientQt : public content::
 public:
     static std::string getUserAgent();
 
+#if defined(ENABLE_PLUGINS)
+    virtual void AddPepperPlugins(std::vector<content::PepperPluginInfo>* plugins) Q_DECL_OVERRIDE;
+#endif
+
     virtual base::StringPiece GetDataResource(int, ui::ScaleFactor) const Q_DECL_OVERRIDE;
     virtual std::string GetUserAgent() const Q_DECL_OVERRIDE { return getUserAgent(); }
     virtual base::string16 GetLocalizedString(int message_id) const Q_DECL_OVERRIDE;
--- qtwebengine-opensource-src-5.5.1/src/core/qtwebengine.gypi.0001~	2015-10-13 06:36:54.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/src/core/qtwebengine.gypi	2015-10-21 16:30:49.634922556 +0200
@@ -16,6 +16,7 @@
       '<(chromium_src_dir)/content/content.gyp:content_browser',
       '<(chromium_src_dir)/content/content.gyp:content_common',
       '<(chromium_src_dir)/content/content.gyp:content_gpu',
+      '<(chromium_src_dir)/content/content.gyp:content_ppapi_plugin',
       '<(chromium_src_dir)/content/content.gyp:content_renderer',
       '<(chromium_src_dir)/content/content.gyp:content_utility',
       '<(chromium_src_dir)/content/app/resources/content_resources.gyp:content_resources',
--- qtwebengine-opensource-src-5.5.1/src/core/web_engine_settings.cpp.0001~	2015-10-13 06:36:54.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/src/core/web_engine_settings.cpp	2015-10-21 16:30:49.634922556 +0200
@@ -213,6 +213,7 @@ void WebEngineSettings::initDefaults(boo
     m_attributes.insert(HyperlinkAuditingEnabled, false);
     m_attributes.insert(ScrollAnimatorEnabled, false);
     m_attributes.insert(ErrorPageEnabled, true);
+    m_attributes.insert(PluginsEnabled, false);
 
     // Default fonts
     QFont defaultFont;
@@ -277,6 +278,7 @@ void WebEngineSettings::applySettingsToW
     prefs->hyperlink_auditing_enabled = testAttribute(HyperlinkAuditingEnabled);
     prefs->enable_scroll_animator = testAttribute(ScrollAnimatorEnabled);
     prefs->enable_error_page = testAttribute(ErrorPageEnabled);
+    prefs->plugins_enabled = testAttribute(PluginsEnabled);
 
     // Fonts settings.
     prefs->standard_font_family_map[content::kCommonScript] = toString16(fontFamily(StandardFont));
--- qtwebengine-opensource-src-5.5.1/src/core/web_engine_settings.h.0001~	2015-10-13 06:36:54.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/src/core/web_engine_settings.h	2015-10-21 16:30:49.634922556 +0200
@@ -71,6 +71,7 @@ public:
         HyperlinkAuditingEnabled,
         ScrollAnimatorEnabled,
         ErrorPageEnabled,
+        PluginsEnabled
     };
 
     // Must match the values from the public API in qwebenginesettings.h.
--- qtwebengine-opensource-src-5.5.1/src/webengine/api/qquickwebenginesettings.cpp.0001~	2015-10-13 06:36:54.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/src/webengine/api/qquickwebenginesettings.cpp	2015-10-21 16:35:47.136261448 +0200
@@ -206,6 +206,18 @@ bool QQuickWebEngineSettings::errorPageE
 }
 
 /*!
+    \qmlproperty bool WebEngineSettings::pluginsEnabled
+
+    This setting enables general support for plugins.
+
+    It is disabled by default.
+*/
+bool QQuickWebEngineSettings::pluginsEnabled() const
+{
+    return d_ptr->testAttribute(WebEngineSettings::PluginsEnabled);
+}
+
+/*!
     \qmlproperty QString WebEngineSettings::defaultTextEncoding
 
     Sets the default encoding. The value must be a string describing an encoding such as "utf-8" or
@@ -309,6 +321,14 @@ void QQuickWebEngineSettings::setErrorPa
         Q_EMIT errorPageEnabledChanged();
 }
 
+void QQuickWebEngineSettings::setPluginsEnabled(bool on)
+{
+    bool wasOn = d_ptr->testAttribute(WebEngineSettings::PluginsEnabled);
+    d_ptr->setAttribute(WebEngineSettings::PluginsEnabled, on);
+    if (wasOn != on)
+        Q_EMIT pluginsEnabledChanged();
+}
+
 void QQuickWebEngineSettings::setDefaultTextEncoding(QString encoding)
 {
     const QString oldDefaultTextEncoding = d_ptr->defaultTextEncoding();
--- qtwebengine-opensource-src-5.5.1/src/webengine/api/qquickwebenginesettings_p.h.0001~	2015-10-13 06:36:54.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/src/webengine/api/qquickwebenginesettings_p.h	2015-10-21 16:30:49.635922557 +0200
@@ -71,6 +71,7 @@ class Q_WEBENGINE_PRIVATE_EXPORT QQuickW
     Q_PROPERTY(bool localContentCanAccessFileUrls READ localContentCanAccessFileUrls WRITE setLocalContentCanAccessFileUrls NOTIFY localContentCanAccessFileUrlsChanged)
     Q_PROPERTY(bool hyperlinkAuditingEnabled READ hyperlinkAuditingEnabled WRITE setHyperlinkAuditingEnabled NOTIFY hyperlinkAuditingEnabledChanged)
     Q_PROPERTY(bool errorPageEnabled READ errorPageEnabled WRITE setErrorPageEnabled NOTIFY errorPageEnabledChanged)
+    Q_PROPERTY(bool pluginsEnabled READ pluginsEnabled WRITE setPluginsEnabled NOTIFY pluginsEnabledChanged)
     Q_PROPERTY(QString defaultTextEncoding READ defaultTextEncoding WRITE setDefaultTextEncoding NOTIFY defaultTextEncodingChanged)
 
 public:
@@ -87,6 +88,7 @@ public:
     bool localContentCanAccessFileUrls() const;
     bool hyperlinkAuditingEnabled() const;
     bool errorPageEnabled() const;
+    bool pluginsEnabled() const;
     QString defaultTextEncoding() const;
 
     void setAutoLoadImages(bool on);
@@ -100,6 +102,7 @@ public:
     void setLocalContentCanAccessFileUrls(bool on);
     void setHyperlinkAuditingEnabled(bool on);
     void setErrorPageEnabled(bool on);
+    void setPluginsEnabled(bool on);
     void setDefaultTextEncoding(QString encoding);
 
 signals:
@@ -114,6 +117,7 @@ signals:
     void localContentCanAccessFileUrlsChanged();
     void hyperlinkAuditingEnabledChanged();
     void errorPageEnabledChanged();
+    void pluginsEnabledChanged();
     void defaultTextEncodingChanged();
 
 private:
--- qtwebengine-opensource-src-5.5.1/src/webenginewidgets/api/qwebenginesettings.h.0001~	2015-10-13 06:36:54.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/src/webenginewidgets/api/qwebenginesettings.h	2015-10-21 16:30:49.635922557 +0200
@@ -58,7 +58,8 @@ public:
         LocalContentCanAccessFileUrls,
         HyperlinkAuditingEnabled,
         ScrollAnimatorEnabled,
-        ErrorPageEnabled
+        ErrorPageEnabled,
+        PluginsEnabled
     };
 
     enum FontSize {
--- qtwebengine-opensource-src-5.5.1/tests/quicktestbrowser/BrowserWindow.qml.0001~	2015-10-13 06:35:46.000000000 +0200
+++ qtwebengine-opensource-src-5.5.1/tests/quicktestbrowser/BrowserWindow.qml	2015-10-21 16:30:49.635922557 +0200
@@ -76,6 +76,7 @@ ApplicationWindow {
         property alias autoLoadImages: loadImages.checked;
         property alias javaScriptEnabled: javaScriptEnabled.checked;
         property alias errorPageEnabled: errorPageEnabled.checked;
+        property alias pluginsEnabled: pluginsEnabled.checked;
     }
 
     // Make sure the Qt.WindowFullscreenButtonHint is set on OS X.
@@ -245,6 +246,12 @@ ApplicationWindow {
                             checked: true
                         }
                         MenuItem {
+                            id: pluginsEnabled
+                            text: "Plugins On"
+                            checkable: true
+                            checked: true
+                        }
+                        MenuItem {
                             id: offTheRecordEnabled
                             text: "Off The Record"
                             checkable: true
@@ -347,6 +354,7 @@ ApplicationWindow {
                     settings.autoLoadImages: appSettings.autoLoadImages
                     settings.javascriptEnabled: appSettings.javaScriptEnabled
                     settings.errorPageEnabled: appSettings.errorPageEnabled
+                    settings.pluginsEnabled: appSettings.pluginsEnabled
 
                     onCertificateError: {
                         if (!acceptedCertificates.shouldAutoAccept(error)){
