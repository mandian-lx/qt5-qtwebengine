From 3ed2314133cca326363b8bef1a5927dfb685e2a0 Mon Sep 17 00:00:00 2001
From: Zeno Albisser <zeno.albisser@theqtcompany.com>
Date: Wed, 21 Jan 2015 10:42:47 +0200
Subject: Add support for Shockwave Flash plugin.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

We will try to load the pepper flash plugin from
the places where it is most commonly located.
Alternatively the location and flash version
can be passed on the command line.

Change-Id: I41367586462157e722661aab3630357d6caf6a81
Reviewed-by: Michael Br√ºning <michael.bruning@theqtcompany.com>
---
 .../webengine/quicknanobrowser/BrowserWindow.qml   |   8 ++
 src/core/config/desktop_linux.pri                  |   1 +
 src/core/config/mac_osx.pri                        |   3 +-
 src/core/content_client_qt.cpp                     | 108 +++++++++++++++++++++
 src/core/content_client_qt.h                       |   4 +
 src/core/qtwebengine.gypi                          |   1 +
 src/core/web_engine_settings.cpp                   |   2 +
 src/core/web_engine_settings.h                     |   1 +
 src/webengine/api/qquickwebenginesettings.cpp      |  20 ++++
 src/webengine/api/qquickwebenginesettings_p.h      |   4 +
 src/webenginewidgets/api/qwebenginesettings.h      |   3 +-
 tests/quicktestbrowser/BrowserWindow.qml           |   8 ++
 12 files changed, 161 insertions(+), 2 deletions(-)

diff --git a/examples/webengine/quicknanobrowser/BrowserWindow.qml b/examples/webengine/quicknanobrowser/BrowserWindow.qml
index c4c0270..0df17f0 100644
--- a/examples/webengine/quicknanobrowser/BrowserWindow.qml
+++ b/examples/webengine/quicknanobrowser/BrowserWindow.qml
@@ -82,6 +82,7 @@ ApplicationWindow {
         property alias autoLoadImages: loadImages.checked;
         property alias javaScriptEnabled: javaScriptEnabled.checked;
         property alias errorPageEnabled: errorPageEnabled.checked;
+        property alias pluginsEnabled: pluginsEnabled.checked;
     }
 
     Action {
@@ -230,6 +231,12 @@ ApplicationWindow {
                             checked: WebEngine.settings.errorPageEnabled
                         }
                         MenuItem {
+                            id: pluginsEnabled
+                            text: "Plugins On"
+                            checkable: true
+                            checked: true
+                        }
+                        MenuItem {
                             id: offTheRecordEnabled
                             text: "Off The Record"
                             checkable: true
@@ -312,6 +319,7 @@ ApplicationWindow {
                 settings.autoLoadImages: appSettings.autoLoadImages
                 settings.javascriptEnabled: appSettings.javaScriptEnabled
                 settings.errorPageEnabled: appSettings.errorPageEnabled
+                settings.pluginsEnabled: appSettings.pluginsEnabled
 
                 onCertificateError: {
                     error.defer()
diff --git a/src/core/config/desktop_linux.pri b/src/core/config/desktop_linux.pri
index 041b094..679e555 100644
--- a/src/core/config/desktop_linux.pri
+++ b/src/core/config/desktop_linux.pri
@@ -15,6 +15,7 @@ GYP_CONFIG += \
     use_pango=0 \
     host_clang=0 \
     clang=0 \
+    enable_plugins=1 \
 
 contains(QT_CONFIG, system-jpeg): GYP_CONFIG += use_system_libjpeg=1
 
diff --git a/src/core/config/mac_osx.pri b/src/core/config/mac_osx.pri
index 3f42b6f..93c7762 100644
--- a/src/core/config/mac_osx.pri
+++ b/src/core/config/mac_osx.pri
@@ -14,7 +14,8 @@ GYP_CONFIG += \
     mac_sdk_min=\"10.7\" \
     mac_deployment_target=\"$${QMAKE_MACOSX_DEPLOYMENT_TARGET}\" \
     make_clang_dir=\"$${QMAKE_CLANG_DIR}\" \
-    clang_use_chrome_plugins=0
+    clang_use_chrome_plugins=0 \
+    enable_plugins=1
 
 QMAKE_MAC_SDK_PATH = "$$eval(QMAKE_MAC_SDK.$${QMAKE_MAC_SDK}.path)"
 exists($$QMAKE_MAC_SDK_PATH): GYP_CONFIG += mac_sdk_path=\"$${QMAKE_MAC_SDK_PATH}\"
diff --git a/src/core/content_client_qt.cpp b/src/core/content_client_qt.cpp
index 20a8df7..f408492 100644
--- a/src/core/content_client_qt.cpp
+++ b/src/core/content_client_qt.cpp
@@ -36,11 +36,120 @@
 
 #include "content_client_qt.h"
 
+#include "base/command_line.h"
 #include "base/strings/string_piece.h"
+#include "base/strings/string_split.h"
+#include "base/strings/string_util.h"
+#include "content/public/common/content_constants.h"
 #include "content/public/common/user_agent.h"
 #include "ui/base/layout.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/resource/resource_bundle.h"
+#include "type_conversion.h"
+
+#include <QCoreApplication>
+#include <QFile>
+#include <QStringBuilder>
+
+#if defined(ENABLE_PLUGINS)
+#include "content/public/common/pepper_plugin_info.h"
+#include "ppapi/shared_impl/ppapi_permissions.h"
+
+static const int32 kPepperFlashPermissions = ppapi::PERMISSION_DEV |
+                                             ppapi::PERMISSION_PRIVATE |
+                                             ppapi::PERMISSION_BYPASS_USER_GESTURE |
+                                             ppapi::PERMISSION_FLASH;
+
+namespace switches {
+const char kPpapiFlashPath[]    = "ppapi-flash-path";
+const char kPpapiFlashVersion[] = "ppapi-flash-version";
+}
+
+// Adopted from chrome_content_client.cc
+content::PepperPluginInfo CreatePepperFlashInfo(const base::FilePath& path, const std::string& version)
+{
+    content::PepperPluginInfo plugin;
+
+    plugin.is_out_of_process = true;
+    plugin.name = content::kFlashPluginName;
+    plugin.path = path;
+    plugin.permissions = kPepperFlashPermissions;
+
+    std::vector<std::string> flash_version_numbers;
+    base::SplitString(version, '.', &flash_version_numbers);
+    if (flash_version_numbers.size() < 1)
+        flash_version_numbers.push_back("11");
+    else if (flash_version_numbers[0].empty())
+        flash_version_numbers[0] = "11";
+    if (flash_version_numbers.size() < 2)
+        flash_version_numbers.push_back("2");
+    if (flash_version_numbers.size() < 3)
+        flash_version_numbers.push_back("999");
+    if (flash_version_numbers.size() < 4)
+        flash_version_numbers.push_back("999");
+
+    // E.g., "Shockwave Flash 10.2 r154":
+    plugin.description = plugin.name + " " + flash_version_numbers[0] + "." + flash_version_numbers[1] + " r" + flash_version_numbers[2];
+    plugin.version = JoinString(flash_version_numbers, '.');
+    content::WebPluginMimeType swf_mime_type(content::kFlashPluginSwfMimeType,
+                                             content::kFlashPluginSwfExtension,
+                                             content::kFlashPluginSwfDescription);
+    plugin.mime_types.push_back(swf_mime_type);
+    content::WebPluginMimeType spl_mime_type(content::kFlashPluginSplMimeType,
+                                             content::kFlashPluginSplExtension,
+                                             content::kFlashPluginSplDescription);
+    plugin.mime_types.push_back(spl_mime_type);
+
+    return plugin;
+}
+
+void AddPepperFlashFromSystem(std::vector<content::PepperPluginInfo>* plugins)
+{
+    QStringList pluginPaths;
+#if defined(Q_OS_WIN) && defined(Q_PROCESSOR_X86_32)
+    QDir pluginDir("C:/Windows/SysWOW64/Macromed/Flash");
+    pluginDir.setFilter(QDir::Files);
+    QStringList nameFilters("pepflashplayer*.dll");
+    pluginPaths << pluginDir.entryList(nameFilters);
+#endif
+#if defined(Q_OS_OSX)
+    pluginPaths << "/Library/Internet Plug-Ins/PepperFlashPlayer/PepperFlashPlayer.plugin"; // Mac OS X
+#endif
+#if defined(Q_OS_LINUX)
+    pluginPaths << "/usr/lib/pepperflashplugin-nonfree/libpepflashplayer.so" // Ubuntu
+                << "/usr/lib/PepperFlash/libpepflashplayer.so" // Arch
+                << "/usr/lib64/chromium/PepperFlash/libpepflashplayer.so" // OpenSuSE
+                << "/usr/lib/chromium/PepperFlash/libpepflashplayer.so"; // OpenSuSE 32bit
+#endif
+    for (auto it = pluginPaths.constBegin(); it != pluginPaths.constEnd(); ++it) {
+        if (!QFile(*it).exists())
+            continue;
+        plugins->push_back(CreatePepperFlashInfo(QtWebEngineCore::toFilePath(*it), std::string()));
+        return;
+    }
+}
+
+void AddPepperFlashFromCommandLine(std::vector<content::PepperPluginInfo>* plugins)
+{
+    const CommandLine::StringType flash_path = CommandLine::ForCurrentProcess()->GetSwitchValueNative(switches::kPpapiFlashPath);
+    if (flash_path.empty() || !QFile(QtWebEngineCore::toQt(flash_path)).exists())
+        return;
+
+    // Read pepper flash plugin version from command-line. (e.g. 16.0.0.235)
+    std::string flash_version = CommandLine::ForCurrentProcess()->GetSwitchValueASCII(switches::kPpapiFlashVersion);
+    plugins->push_back(CreatePepperFlashInfo(base::FilePath(flash_path), flash_version));
+}
+
+namespace QtWebEngineCore {
+
+void ContentClientQt::AddPepperPlugins(std::vector<content::PepperPluginInfo>* plugins)
+{
+    AddPepperFlashFromSystem(plugins);
+    AddPepperFlashFromCommandLine(plugins);
+}
+
+}
+#endif
 
 #include <QCoreApplication>
 #include <QStringBuilder>
diff --git a/src/core/content_client_qt.h b/src/core/content_client_qt.h
index f68282d..309e049 100644
--- a/src/core/content_client_qt.h
+++ b/src/core/content_client_qt.h
@@ -48,6 +48,10 @@ class ContentClientQt : public content::ContentClient {
 public:
     static std::string getUserAgent();
 
+#if defined(ENABLE_PLUGINS)
+    virtual void AddPepperPlugins(std::vector<content::PepperPluginInfo>* plugins) Q_DECL_OVERRIDE;
+#endif
+
     virtual base::StringPiece GetDataResource(int, ui::ScaleFactor) const Q_DECL_OVERRIDE;
     virtual std::string GetUserAgent() const Q_DECL_OVERRIDE { return getUserAgent(); }
     virtual base::string16 GetLocalizedString(int message_id) const Q_DECL_OVERRIDE;
diff --git a/src/core/qtwebengine.gypi b/src/core/qtwebengine.gypi
index b3e645a..3591a5d 100644
--- a/src/core/qtwebengine.gypi
+++ b/src/core/qtwebengine.gypi
@@ -16,6 +16,7 @@
       '<(chromium_src_dir)/content/content.gyp:content_browser',
       '<(chromium_src_dir)/content/content.gyp:content_common',
       '<(chromium_src_dir)/content/content.gyp:content_gpu',
+      '<(chromium_src_dir)/content/content.gyp:content_ppapi_plugin',
       '<(chromium_src_dir)/content/content.gyp:content_renderer',
       '<(chromium_src_dir)/content/content.gyp:content_utility',
       '<(chromium_src_dir)/content/app/resources/content_resources.gyp:content_resources',
diff --git a/src/core/web_engine_settings.cpp b/src/core/web_engine_settings.cpp
index 74c60b7..f907f6e 100644
--- a/src/core/web_engine_settings.cpp
+++ b/src/core/web_engine_settings.cpp
@@ -213,6 +213,7 @@ void WebEngineSettings::initDefaults(bool offTheRecord)
     m_attributes.insert(HyperlinkAuditingEnabled, false);
     m_attributes.insert(ScrollAnimatorEnabled, false);
     m_attributes.insert(ErrorPageEnabled, true);
+    m_attributes.insert(PluginsEnabled, false);
 
     // Default fonts
     QFont defaultFont;
@@ -277,6 +278,7 @@ void WebEngineSettings::applySettingsToWebPreferences(content::WebPreferences *p
     prefs->hyperlink_auditing_enabled = testAttribute(HyperlinkAuditingEnabled);
     prefs->enable_scroll_animator = testAttribute(ScrollAnimatorEnabled);
     prefs->enable_error_page = testAttribute(ErrorPageEnabled);
+    prefs->plugins_enabled = testAttribute(PluginsEnabled);
 
     // Fonts settings.
     prefs->standard_font_family_map[content::kCommonScript] = toString16(fontFamily(StandardFont));
diff --git a/src/core/web_engine_settings.h b/src/core/web_engine_settings.h
index e9d8010..a59a7f5 100644
--- a/src/core/web_engine_settings.h
+++ b/src/core/web_engine_settings.h
@@ -71,6 +71,7 @@ public:
         HyperlinkAuditingEnabled,
         ScrollAnimatorEnabled,
         ErrorPageEnabled,
+        PluginsEnabled
     };
 
     // Must match the values from the public API in qwebenginesettings.h.
diff --git a/src/webengine/api/qquickwebenginesettings.cpp b/src/webengine/api/qquickwebenginesettings.cpp
index 8a88bac..26ea094 100644
--- a/src/webengine/api/qquickwebenginesettings.cpp
+++ b/src/webengine/api/qquickwebenginesettings.cpp
@@ -209,6 +209,18 @@ bool QQuickWebEngineSettings::errorPageEnabled() const
 }
 
 /*!
+    \qmlproperty bool WebEngineSettings::pluginsEnabled
+
+    This setting enables general support for plugins.
+
+    It is disabled by default.
+*/
+bool QQuickWebEngineSettings::pluginsEnabled() const
+{
+    return d_ptr->testAttribute(WebEngineSettings::PluginsEnabled);
+}
+
+/*!
     \qmlproperty QString WebEngineSettings::defaultTextEncoding
 
     The \a encoding, must be a string describing an encoding such as "utf-8",
@@ -312,6 +324,14 @@ void QQuickWebEngineSettings::setErrorPageEnabled(bool on)
         Q_EMIT errorPageEnabledChanged();
 }
 
+void QQuickWebEngineSettings::setPluginsEnabled(bool on)
+{
+    bool wasOn = d_ptr->testAttribute(WebEngineSettings::PluginsEnabled);
+    d_ptr->setAttribute(WebEngineSettings::PluginsEnabled, on);
+    if (wasOn != on)
+        Q_EMIT pluginsEnabledChanged();
+}
+
 void QQuickWebEngineSettings::setDefaultTextEncoding(QString encoding)
 {
     const QString oldDefaultTextEncoding = d_ptr->defaultTextEncoding();
diff --git a/src/webengine/api/qquickwebenginesettings_p.h b/src/webengine/api/qquickwebenginesettings_p.h
index 68c85ea..f077c0e 100644
--- a/src/webengine/api/qquickwebenginesettings_p.h
+++ b/src/webengine/api/qquickwebenginesettings_p.h
@@ -60,6 +60,7 @@ class Q_WEBENGINE_PRIVATE_EXPORT QQuickWebEngineSettings : public QObject {
     Q_PROPERTY(bool localContentCanAccessFileUrls READ localContentCanAccessFileUrls WRITE setLocalContentCanAccessFileUrls NOTIFY localContentCanAccessFileUrlsChanged)
     Q_PROPERTY(bool hyperlinkAuditingEnabled READ hyperlinkAuditingEnabled WRITE setHyperlinkAuditingEnabled NOTIFY hyperlinkAuditingEnabledChanged)
     Q_PROPERTY(bool errorPageEnabled READ errorPageEnabled WRITE setErrorPageEnabled NOTIFY errorPageEnabledChanged)
+    Q_PROPERTY(bool pluginsEnabled READ pluginsEnabled WRITE setPluginsEnabled NOTIFY pluginsEnabledChanged)
     Q_PROPERTY(QString defaultTextEncoding READ defaultTextEncoding WRITE setDefaultTextEncoding NOTIFY defaultTextEncodingChanged)
 
 public:
@@ -76,6 +77,7 @@ public:
     bool localContentCanAccessFileUrls() const;
     bool hyperlinkAuditingEnabled() const;
     bool errorPageEnabled() const;
+    bool pluginsEnabled() const;
     QString defaultTextEncoding() const;
 
     void setAutoLoadImages(bool on);
@@ -89,6 +91,7 @@ public:
     void setLocalContentCanAccessFileUrls(bool on);
     void setHyperlinkAuditingEnabled(bool on);
     void setErrorPageEnabled(bool on);
+    void setPluginsEnabled(bool on);
     void setDefaultTextEncoding(QString encoding);
 
 signals:
@@ -103,6 +106,7 @@ signals:
     void localContentCanAccessFileUrlsChanged();
     void hyperlinkAuditingEnabledChanged();
     void errorPageEnabledChanged();
+    void pluginsEnabledChanged();
     void defaultTextEncodingChanged();
 
 private:
diff --git a/src/webenginewidgets/api/qwebenginesettings.h b/src/webenginewidgets/api/qwebenginesettings.h
index 44339a2..50a93e3 100644
--- a/src/webenginewidgets/api/qwebenginesettings.h
+++ b/src/webenginewidgets/api/qwebenginesettings.h
@@ -58,7 +58,8 @@ public:
         LocalContentCanAccessFileUrls,
         HyperlinkAuditingEnabled,
         ScrollAnimatorEnabled,
-        ErrorPageEnabled
+        ErrorPageEnabled,
+        PluginsEnabled
     };
 
     enum FontSize {
diff --git a/tests/quicktestbrowser/BrowserWindow.qml b/tests/quicktestbrowser/BrowserWindow.qml
index f93a6cc..e626f00 100644
--- a/tests/quicktestbrowser/BrowserWindow.qml
+++ b/tests/quicktestbrowser/BrowserWindow.qml
@@ -76,6 +76,7 @@ ApplicationWindow {
         property alias autoLoadImages: loadImages.checked;
         property alias javaScriptEnabled: javaScriptEnabled.checked;
         property alias errorPageEnabled: errorPageEnabled.checked;
+        property alias pluginsEnabled: pluginsEnabled.checked;
     }
 
     // Make sure the Qt.WindowFullscreenButtonHint is set on OS X.
@@ -245,6 +246,12 @@ ApplicationWindow {
                             checked: true
                         }
                         MenuItem {
+                            id: pluginsEnabled
+                            text: "Plugins On"
+                            checkable: true
+                            checked: true
+                        }
+                        MenuItem {
                             id: offTheRecordEnabled
                             text: "Off The Record"
                             checkable: true
@@ -347,6 +354,7 @@ ApplicationWindow {
                     settings.autoLoadImages: appSettings.autoLoadImages
                     settings.javascriptEnabled: appSettings.javaScriptEnabled
                     settings.errorPageEnabled: appSettings.errorPageEnabled
+                    settings.pluginsEnabled: appSettings.pluginsEnabled
 
                     onCertificateError: {
                         if (!acceptedCertificates.shouldAutoAccept(error)){
-- 
cgit v0.11.0
