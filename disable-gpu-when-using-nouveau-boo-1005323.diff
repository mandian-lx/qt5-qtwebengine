Index: qtwebengine-opensource-src-5.6.2/src/core/web_engine_context.cpp
===================================================================
--- qtwebengine-opensource-src-5.6.2.orig/src/core/web_engine_context.cpp
+++ qtwebengine-opensource-src-5.6.2/src/core/web_engine_context.cpp
@@ -78,6 +78,7 @@
 #include "web_engine_library_info.h"
 #include <QFileInfo>
 #include <QGuiApplication>
+#include <QOpenGLFunctions>
 #include <QOffscreenSurface>
 #include <QOpenGLContext>
 #include <QStringList>
@@ -146,6 +147,37 @@ bool usingQtQuick2DRenderer()
     return device == QLatin1String("softwarecontext");
 }
 
+QString openGLVendor()
+{
+    QString vendor;
+
+    QOpenGLContext *oldContext = QOpenGLContext::currentContext();
+    QSurface *oldSurface = 0;
+    if (oldContext)
+        oldSurface = oldContext->surface();
+
+    QScopedPointer<QOffscreenSurface> surface( new QOffscreenSurface );
+    surface->create();
+    QOpenGLContext context;
+    if (!context.create()) {
+        qDebug() << "Error creating openGL context";
+    }
+    else if (!context.makeCurrent(surface.data())) {
+        qDebug() << "Error making openGL context current context";
+    } else {
+        const GLubyte *p;
+        QOpenGLFunctions *f = context.functions();
+        if ((p = f->glGetString(GL_VENDOR)))
+            vendor = QString::fromLatin1(reinterpret_cast<const char *>(p));
+    }
+
+    context.doneCurrent();
+    if (oldContext && oldSurface)
+        oldContext->makeCurrent(oldSurface);
+
+    return vendor;
+}
+
 } // namespace
 
 void WebEngineContext::destroyBrowserContext()
@@ -263,8 +295,21 @@ WebEngineContext::WebEngineContext()
 
     GLContextHelper::initialize();
 
+    bool disableGpu = qEnvironmentVariableIsSet("QT_WEBENGINE_DISABLE_GPU");
+
+    if (!qEnvironmentVariableIsSet("QT_WEBENGINE_DISABLE_NOUVEAU_WORKAROUND") && openGLVendor() == QStringLiteral("nouveau"))
+    {
+        qWarning() << "Nouveau openGL driver detected. Qt WebEngine will disable usage of the GPU.\n"
+                      "Please consider using the propietary NVIDIA drivers.\n\n"
+                      "Alternatively, you can set the QT_WEBENGINE_DISABLE_NOUVEAU_WORKAROUND\n"
+                      "environment variable before running this application, but this is \n"
+                      "not recommended since this usually causes applications to crash as\n"
+                      "Nouveau openGL drivers don't support multithreaded rendering";
+        disableGpu = true;
+    }
+
     const char *glType = 0;
-    if (!usingANGLE() && !usingSoftwareDynamicGL() && !usingQtQuick2DRenderer()) {
+    if (!usingANGLE() && !usingSoftwareDynamicGL() && !usingQtQuick2DRenderer() && !disableGpu) {
         if (qt_gl_global_share_context()) {
             if (!strcmp(qt_gl_global_share_context()->nativeHandle().typeName(), "QEGLNativeContext")) {
                 if (qt_gl_global_share_context()->isOpenGLES()) {
